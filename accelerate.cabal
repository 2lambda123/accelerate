Name:                   accelerate
Version:                2.0.0.0
Cabal-version:          >= 1.8
Tested-with:            GHC >= 7.8
Build-type:             Simple

Synopsis:               An embedded language for accelerated array processing

Description:
  @Data.Array.Accelerate@ defines an embedded array language for computations
  for high-performance computing in Haskell. Computations on multi-dimensional,
  regular arrays are expressed in the form of parameterised collective
  operations, such as maps, reductions, and permutations. These computations may
  then be online compiled and executed on a range of architectures.
  .
  [/A simple example/]
  .
  As a simple example, consider the computation of a dot product of two vectors
  of floating point numbers:
  .
  > dotp :: Acc (Vector Float) -> Acc (Vector Float) -> Acc (Scalar Float)
  > dotp xs ys = fold (+) 0 (zipWith (*) xs ys)
  .
  Except for the type, this code is almost the same as the corresponding Haskell
  code on lists of floats. The types indicate that the computation may be
  online-compiled for performance - for example, using
  @Data.Array.Accelerate.CUDA@ it may be on-the-fly off-loaded to the GPU.
  .
  [/Additional components/]
  .
  The following supported add-ons are available as separate packages. Install
  them from Hackage with @cabal install \<package\>@
  .
    * @accelerate-cuda@: Backend targeting CUDA-enabled NVIDIA GPUs. Requires
      the NVIDIA CUDA SDK and, for full functionality, hardware with compute
      compatibility 1.1 or greater. See the following table for supported GPUs:
      <http://en.wikipedia.org/wiki/CUDA#Supported_GPUs>
  .
    * @accelerate-examples@: Computational kernels and applications showcasing
      the use of Accelerate as well as a regression test suite, supporting
      function and performance testing.
  .
    * @accelerate-io@: Fast conversions between Accelerate arrays and other
      array formats (including vector and repa).
  .
    * @accelerate-fft@: Discrete Fourier transforms, with optimised
      implementation for the CUDA backend.
  .
  The following components are experimental and/or incomplete. Please contact us if
  you are interested in helping to work on or test them!
  .
    * @accelerate-llvm@: A framework for constructing backends targeting LLVM
      IR, with concrete backends for multicore CPUs and NVIDIA GPUs.
  .
  Additionally, the following libraries can be used with Accelerate:
  .
    * @colour-accelerate@: Colour representations in Accelerate (RGB, sRGB, HSV,
      and HSL).
  .
    * @gloss-accelerate@: Generate gloss pictures from Accelerate.
  .
    * @gloss-raster-accelerate@: Parallel rendering of raster images and
      animations.
  .
    * @lens-accelerate@: Lens operators for Accelerate types.
  .
    * @linear-accelerate@: Linear vector spaces in Accelerate.
  .
    * @mwc-random-accelerate@: Generate Accelerate arrays filled with high
      quality pseudorandom numbers.
  .
    * @numeric-prelude-accelerate@: Lifting numeric-prelude to Accelerate.
  .
  [/Examples and documentation/]
  .
  Haddock documentation is included in the package, and a tutorial is available
  on the GitHub wiki: <https://github.com/AccelerateHS/accelerate/wiki>
  .
  The @accelerate-examples@ package demonstrates a range of computational
  kernels and several complete applications, including:
  .
    * An implementation of the Canny edge detection algorithm
  .
    * An interactive Mandelbrot set generator
  .
    * A particle-based simulation of stable fluid flows
  .
    * An /n/-body simulation of gravitational attraction between solid particles
  .
    * A cellular automata simulation
  .
    * A \"password recovery\" tool, for dictionary lookup of MD5 hashes
  .
    * A simple interactive ray tracer
  .
  [/Mailing list and contacts/]
  .
    * Mailing list: <accelerate-haskell@googlegroups.com> (discussion of both
      use and development welcome).
  .
    * Sign up for the mailing list here:
      <http://groups.google.com/group/accelerate-haskell>
  .
    * Bug reports and issue tracking:
      <https://github.com/AccelerateHS/accelerate/issues>
  .
  [/Hackage note/]
  .
  The module documentation list generated by Hackage is incorrect. The only
  exposed modules should be:
  .
    * "Data.Array.Accelerate"
  .
    * "Data.Array.Accelerate.Interpreter"
  .
    * "Data.Array.Accelerate.Data.Bits"
  .
    * "Data.Array.Accelerate.Data.Complex"
  .

License:                BSD3
License-file:           LICENSE
Author:                 Manuel M T Chakravarty,
                        Robert Clifton-Everest,
                        Gabriele Keller,
                        Sean Lee,
                        Ben Lever,
                        Trevor L. McDonell,
                        Ryan Newtown,
                        Sean Seefried
Maintainer:             Manuel M T Chakravarty <chak@cse.unsw.edu.au>
Homepage:               https://github.com/AccelerateHS/accelerate/
Bug-reports:            https://github.com/AccelerateHS/accelerate/issues

Category:               Compilers/Interpreters, Concurrency, Data, Parallelism
Stability:              Experimental

Extra-source-files:     changelog.md

Flag debug
  Default:              False
  Description:
    Enable tracing message flags. These are read from the command-line
    arguments, which is convenient but may cause problems interacting with the
    user program, so are disabled by default. The available options are:
    .
    * -ddump-sharing: print sharing recovery information
    .
    * -ddump-simpl-stats: dump statistics counts from the simplifier phase
    .
    * -ddump-simpl-iterations: dump the program after each iteration of the simplifier
    .
    * -ddump-dot: write the program DAG to file in Graphviz dot format
    .
    * -ddump-simpl-dot: write the program DAG to file in Graphviz dot format,
    .                   but elide the scalar expressions
    .
    * -dverbose: other, uncategorised messages
    .

Flag bounds-checks
  Description:          Enable bounds checking
  Default:              True

Flag unsafe-checks
  Description:          Enable bounds checking in unsafe operations
  Default:              False

Flag internal-checks
  Description:          Enable internal consistency checks
  Default:              False

Library
  Build-depends:
          base                          >= 4.7
        , array                         >= 0.3
        , base-orphans                  >= 0.3
        , containers                    >= 0.3
        , deepseq                       >= 1.3
        , directory                     >= 1.0
        , exceptions                    >= 0.6
        , fclabels                      >= 2.0
        , filepath                      >= 1.0
        , ghc-prim
        , hashable                      >= 1.1
        , hashtables                    >= 1.0
        , mtl                           >= 2.0
        , pretty                        >= 1.0
        , template-haskell
        , transformers                  >= 0.3
        , unique
        , unordered-containers          >= 0.2

  Exposed-modules:
        -- The core language and reference implementation
        Data.Array.Accelerate
        Data.Array.Accelerate.Interpreter

        -- Prelude-like
        Data.Array.Accelerate.Data.Bits
        Data.Array.Accelerate.Data.Complex

        -- For backend development
        Data.Array.Accelerate.AST
        Data.Array.Accelerate.Analysis.Match
        Data.Array.Accelerate.Analysis.Shape
        Data.Array.Accelerate.Analysis.Stencil
        Data.Array.Accelerate.Analysis.Type
        Data.Array.Accelerate.Array.Data
        Data.Array.Accelerate.Array.Remote
        Data.Array.Accelerate.Array.Remote.Class
        Data.Array.Accelerate.Array.Remote.LRU
        Data.Array.Accelerate.Array.Remote.Table
        Data.Array.Accelerate.Array.Representation
        Data.Array.Accelerate.Array.Sugar
        Data.Array.Accelerate.Array.Unique
        Data.Array.Accelerate.Async
        Data.Array.Accelerate.Debug
        Data.Array.Accelerate.Error
        Data.Array.Accelerate.FullList
        Data.Array.Accelerate.Lifetime
        Data.Array.Accelerate.Pretty
        Data.Array.Accelerate.Product
        Data.Array.Accelerate.Smart
        Data.Array.Accelerate.Trafo
        Data.Array.Accelerate.Type

  Other-modules:
        Data.Array.Accelerate.Array.Lifted
        Data.Array.Accelerate.Array.Remote.Nursery
        Data.Array.Accelerate.Classes
        Data.Array.Accelerate.Classes.Bounded
        Data.Array.Accelerate.Classes.Enum
        Data.Array.Accelerate.Classes.Eq
        Data.Array.Accelerate.Classes.Floating
        Data.Array.Accelerate.Classes.Fractional
        Data.Array.Accelerate.Classes.FromIntegral
        Data.Array.Accelerate.Classes.Integral
        Data.Array.Accelerate.Classes.Num
        Data.Array.Accelerate.Classes.Ord
        Data.Array.Accelerate.Classes.Real
        Data.Array.Accelerate.Classes.RealFloat
        Data.Array.Accelerate.Classes.RealFrac
        Data.Array.Accelerate.Classes.ToFloating
        Data.Array.Accelerate.Debug.Flags
        Data.Array.Accelerate.Debug.Stats
        Data.Array.Accelerate.Debug.Trace
        Data.Array.Accelerate.Language
        Data.Array.Accelerate.Lift
        Data.Array.Accelerate.Prelude
        Data.Array.Accelerate.Pretty.Graphviz
        Data.Array.Accelerate.Pretty.Graphviz.Monad
        Data.Array.Accelerate.Pretty.Graphviz.Type
        Data.Array.Accelerate.Pretty.Print
        Data.Array.Accelerate.Trafo.Algebra
        Data.Array.Accelerate.Trafo.Base
        Data.Array.Accelerate.Trafo.Fusion
        Data.Array.Accelerate.Trafo.Rewrite
        Data.Array.Accelerate.Trafo.Sharing
        Data.Array.Accelerate.Trafo.Shrink
        Data.Array.Accelerate.Trafo.Simplify
        Data.Array.Accelerate.Trafo.Substitution
        Data.Array.Accelerate.Trafo.Vectorise


  if flag(debug)
    cpp-options:        -DACCELERATE_DEBUG

  if flag(bounds-checks)
    cpp-options:        -DACCELERATE_BOUNDS_CHECKS

  if flag(unsafe-checks)
    cpp-options:        -DACCELERATE_UNSAFE_CHECKS

  if flag(internal-checks)
    cpp-options:        -DACCELERATE_INTERNAL_CHECKS

  if os(windows)
    cpp-options:        -DWIN32
    build-depends:      Win32
  else
    cpp-options:        -DUNIX
    build-depends:      unix

  ghc-options:          -O2 -Wall -funbox-strict-fields -fno-warn-name-shadowing
  ghc-prof-options:     -caf-all -auto-all

  if impl(ghc >= 7.0)
    ghc-options:        -fspec-constr-count=25

  if impl(ghc == 7.*)
    ghc-options:        -fcontext-stack=35

  if impl(ghc >= 8.0)
    ghc-options:        -freduction-depth=35

  -- Don't add the extensions list here. Instead, place individual LANGUAGE
  -- pragmas in the files that require a specific extension. This means the
  -- project loads in GHCi, and avoids extension clashes.
  --
  -- Extensions:

source-repository head
  Type:                 git
  Location:             git://github.com/AccelerateHS/accelerate.git

-- vim: nospell
